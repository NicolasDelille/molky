{"version":3,"sources":["components/Board/Board.module.css","components/Button/Button.module.css","components/WinnerBanner/WinnerBanner.module.css","components/Score/Score.module.css","components/Game/Game.module.css","App.module.css","components/Button/Button.js","components/Score/Score.js","components/WinnerBanner/WinnerBanner.js","components/Board/Board.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Button","selected","value","onClick","type","className","classes","Score","scoreBoard","Table","map","player","name","score","WinnerBanner","winner","onNewGame","WinnerPage","BUTTONS","Board","onPlay","useState","setSelected","Buttons","row","index","Row","button","prevState","Action","disabled","Game","currentPlayer","players","initialScoreBoard","App","roundPlayers","setCurrentPlayer","game","setGame","setWinner","setScoreBoard","currentValue","gameOver","undefined","updatedScoreBoard","console","log","nextPlayerIndex","findIndex","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.057bc596.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2Vm6-\",\"Buttons\":\"Board_Buttons__29Nyt\",\"Row\":\"Board_Row__3xdzD\",\"Action\":\"Board_Action__-eJqV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3R1xi\",\"selected\":\"Button_selected__1LYm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WinnerPage\":\"WinnerBanner_WinnerPage__ZHNK6\",\"WinnerBanner\":\"WinnerBanner_WinnerBanner__1Ll-z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"Score_Table__3uOIQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__2P9KR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React from 'react';\nimport classes from './Button.module.css';\n\nconst Button = ({ selected, value, onClick }) => {\n    return (\n        <button\n            onClick={onClick}\n            type='button'\n            className={\n                selected\n                    ? `${classes.Button} ${classes.selected}`\n                    : classes.Button\n            }\n        >\n            {value}\n        </button>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport classes from './Score.module.css';\n\nconst Score = ({ scoreBoard }) => {\n\n    return (\n        <table className={classes.Table}>\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Score</th>\n                </tr>\n            </thead>\n            <tbody>\n                {scoreBoard.map((player) => (\n                    // <tr key={round.id}> is better\n                    <tr key={player.name}>\n                        <td>{player.name}</td>\n                        <td>{player.score}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n};\n\nexport default Score;\n","import classes from './WinnerBanner.module.css';\n\nconst WinnerBanner = ({winner, onNewGame}) => {\n    return (\n        <div className={classes.WinnerPage}>\n            <div className={classes.WinnerBanner}>\n                <p>{winner} a gagn√©!</p>\n                <button\n                    onClick={() => {\n                        onNewGame();\n                    }}\n                >\n                    Nouvelle Partie\n                </button>\n            </div>\n        </div>\n    );\n}\nexport default WinnerBanner;\n","import { useState } from 'react/cjs/react.development';\nimport Button from '../Button/Button';\nimport Score from '../Score/Score';\nimport WinnerBanner from '../WinnerBanner/WinnerBanner';\nimport classes from './Board.module.css';\n\nconst BUTTONS = [\n    [\n        {\n            value: 7,\n        },\n        {\n            value: 9,\n        },\n        {\n            value: 8,\n        },\n    ],\n    [\n        {\n            value: 5,\n        },\n        {\n            value: 11,\n        },\n        {\n            value: 12,\n        },\n        {\n            value: 6,\n        },\n    ],\n    [\n        {\n            value: 3,\n        },\n        {\n            value: 10,\n        },\n        {\n            value: 4,\n        },\n    ],\n    [\n        {\n            value: 1,\n        },\n        {\n            value: 2,\n        },\n    ],\n];\n\nconst Board = ({ onPlay, winner, scoreBoard, onNewGame}) => {\n    const [selected, setSelected] = useState();\n\n    const handleButtonSelect = (value) => {\n        setSelected((prevState) => (prevState === value ? null : value));\n    };\n\n    return (\n        <div className={classes.Board}>\n            <div className={classes.Buttons}>\n                {BUTTONS.map((row, index) => (\n                    <div className={classes.Row} key={index}>\n                        {row.map((button) => (\n                            <Button\n                                key={button.value}\n                                value={button.value}\n                                onClick={() => handleButtonSelect(button.value)}\n                                selected={selected === button.value}\n                            />\n                        ))}\n                    </div>\n                ))}\n                {winner && <WinnerBanner winner={winner} onNewGame={onNewGame} />}\n            </div>\n            <Score scoreBoard={scoreBoard} />\n            <div className={classes.Action}>\n                <button\n                    onClick={() => {\n                        onPlay(selected);\n                        setSelected();\n                    }}\n                    disabled\n                >\n                    Annuler\n                </button>\n                <button\n                    onClick={() => {\n                        onPlay(selected);\n                        setSelected();\n                    }}\n                    disabled={winner}\n                >\n                    Valider\n                </button>\n            </div> \n        </div>\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport classes from './Game.module.css';\n\nconst Game = ({ currentPlayer }) => {\n    return <div className={classes.Game}>{currentPlayer}</div>;\n};\n\nexport default Game;\n","import Board from './components/Board/Board';\nimport Game from './components/Game/Game';\nimport classes from './App.module.css';\nimport { useState } from 'react/cjs/react.development';\n//import { shuffleArray } from './utils/helpers';\n\nconst players = [\n    {\n        name: 'Martin',\n    },\n    {\n        name: 'Thibaut',\n    },\n    {\n        name: 'Nicolas',\n    },\n    {\n        name: 'Corentin',\n    },\n    {\n        name: 'Benjamin',\n    },\n];\n\nconst initialScoreBoard = players.map(player => (\n    {\n        name: player.name,\n        score: 0,\n    }\n))\n\nfunction App() {\n    const roundPlayers = players;\n    const [currentPlayer, setCurrentPlayer] = useState(roundPlayers[0].name);\n    // game (rename?) contains the current player and the current selected value\n    const [game, setGame] = useState([]);\n    // winner contains the name of the winner, empty if no winner yet\n    const [winner, setWinner] = useState(null);\n    // scoreBoard contains the list of players and their score\n    const [scoreBoard, setScoreBoard] = useState(initialScoreBoard);\n\n    const handleOnPlay = (value) => {\n\t\tlet currentValue = value\n        let gameOver = false\n\t\tif (value === undefined)\n\t\t{\n\t\t\tcurrentValue = 0\n\t\t}\n        \n        setGame([\n            ...game,\n            {\n                player: currentPlayer,\n                score: currentValue,\n            },\n        ]);\n\n        const updatedScoreBoard = scoreBoard.map(player => {\n            if (currentPlayer === player.name)\n            {\n                const updatedScore = player.score + currentValue\n                if (updatedScore >= 50)\n                {\n                    setWinner(currentPlayer);\n                    gameOver = true;\n                    console.log(`GameOver: ${gameOver}`);\n                }\n                return {\n                    ...player,\n                    score: player.score + currentValue\n                }\n            }\n            return player;\n        })\n        setScoreBoard(updatedScoreBoard);\n\n        if (!gameOver)\n        {\n            const currentPlayerIndex = players.findIndex(\n                (player) => player.name === currentPlayer\n            );\n            const nextPlayerIndex = (currentPlayerIndex + 1) % players.length;\n            setCurrentPlayer(players[nextPlayerIndex].name);\n        }\n    };\n\n    const handleOnNewGame = () => {\n\t\tsetScoreBoard(initialScoreBoard);\n        setWinner(null);\n    }\n\n    return (\n        <div className={classes.App}>\n            <Game currentPlayer={currentPlayer} />\n            <Board onPlay={handleOnPlay} winner={winner} scoreBoard={scoreBoard} onNewGame={handleOnNewGame} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}